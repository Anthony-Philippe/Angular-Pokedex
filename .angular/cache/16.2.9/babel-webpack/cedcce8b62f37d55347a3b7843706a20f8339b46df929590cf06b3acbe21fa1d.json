{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n  }\n  getPokemons(limit, offset) {\n    return this.http.get(`https://pokeapi.co/api/v2/pokemon?limit=${limit}&offset=${offset}`);\n  }\n  getMoreData(name) {\n    return this.http.get(`https://pokeapi.co/api/v2/pokemon/${name}`);\n  }\n  getRandomPokemons(count) {\n    const randomIds = this.generateRandomIds(count);\n    const requests = randomIds.map(id => this.http.get(`https://pokeapi.co/api/v2/pokemon/${id}`));\n    return forkJoin(requests);\n  }\n  generateRandomIds(count) {\n    const randomIds = [];\n    while (randomIds.length < count) {\n      const randomId = Math.floor(Math.random() * 807) + 1; // Assuming there are 807 Pokémon\n      if (!randomIds.includes(randomId)) {\n        randomIds.push(randomId);\n      }\n    }\n    return randomIds;\n  }\n  static #_ = this.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["DataService","constructor","http","getPokemons","limit","offset","get","getMoreData","name","getRandomPokemons","count","randomIds","generateRandomIds","requests","map","id","forkJoin","length","randomId","Math","floor","random","includes","push","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/anthony/ISEN/Angular/AngularProject/src/app/service/data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  getPokemons(limit: number, offset: number) {\n    return this.http.get(`https://pokeapi.co/api/v2/pokemon?limit=${limit}&offset=${offset}`);\n  }\n\n  getMoreData(name: string) {\n    return this.http.get(`https://pokeapi.co/api/v2/pokemon/${name}`);\n  }\n\n  getRandomPokemons(count: number): Observable<any> {\n    const randomIds = this.generateRandomIds(count);\n    const requests = randomIds.map(id => this.http.get(`https://pokeapi.co/api/v2/pokemon/${id}`));\n\n    return forkJoin(requests);\n  }\n\n  private generateRandomIds(count: number): number[] {\n    const randomIds = [];\n    while (randomIds.length < count) {\n      const randomId = Math.floor(Math.random() * 807) + 1; // Assuming there are 807 Pokémon\n      if (!randomIds.includes(randomId)) {\n        randomIds.push(randomId);\n      }\n    }\n    return randomIds;\n  }\n}\n}\n"],"mappings":";;AAMA,OAAM,MAAOA,WAAW;EAEtBC,YACUC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EACV;EAEJC,WAAWA,CAACC,KAAa,EAAEC,MAAc;IACvC,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAC,2CAA2CF,KAAK,WAAWC,MAAM,EAAE,CAAC;EAC3F;EAEAE,WAAWA,CAACC,IAAY;IACtB,OAAO,IAAI,CAACN,IAAI,CAACI,GAAG,CAAC,qCAAqCE,IAAI,EAAE,CAAC;EACnE;EAEAC,iBAAiBA,CAACC,KAAa;IAC7B,MAAMC,SAAS,GAAG,IAAI,CAACC,iBAAiB,CAACF,KAAK,CAAC;IAC/C,MAAMG,QAAQ,GAAGF,SAAS,CAACG,GAAG,CAACC,EAAE,IAAI,IAAI,CAACb,IAAI,CAACI,GAAG,CAAC,qCAAqCS,EAAE,EAAE,CAAC,CAAC;IAE9F,OAAOC,QAAQ,CAACH,QAAQ,CAAC;EAC3B;EAEQD,iBAAiBA,CAACF,KAAa;IACrC,MAAMC,SAAS,GAAG,EAAE;IACpB,OAAOA,SAAS,CAACM,MAAM,GAAGP,KAAK,EAAE;MAC/B,MAAMQ,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;MACtD,IAAI,CAACV,SAAS,CAACW,QAAQ,CAACJ,QAAQ,CAAC,EAAE;QACjCP,SAAS,CAACY,IAAI,CAACL,QAAQ,CAAC;;;IAG5B,OAAOP,SAAS;EAClB;EAAC,QAAAa,CAAA,G;qBA9BUxB,WAAW,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX7B,WAAW;IAAA8B,OAAA,EAAX9B,WAAW,CAAA+B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}